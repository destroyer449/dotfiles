#+TITLE: My personal Doom Emacs config
#+AUTHOR: Dominic Adamson
#+DESCRIPTION: my personal Doom Emacs config.
#+STARTUP: showstars
#+property: header-args:emacs-lisp :tangle yes :cache yes :results silent :comments link
#+property: header-args :tangle no :results silent
* TABLE OF CONTENTS :toc:noexport:
- [[#about-this-config][ABOUT THIS CONFIG]]
- [[#general-tweaks][GENERAL TWEAKS]]
  - [[#options][OPTIONS]]
  - [[#windows][WINDOWS]]
  - [[#frames][FRAMES]]
  - [[#ui][UI]]
  - [[#splash][SPLASH]]
  - [[#daemon][DAEMON]]
- [[#bookmarks-and-buffers][BOOKMARKS AND BUFFERS]]
- [[#centaur-tabs][CENTAUR-TABS]]
- [[#dired][DIRED]]
- [[#evaluate-elisp-expressions][EVALUATE ELISP EXPRESSIONS]]
- [[#eww][EWW]]
- [[#fonts][FONTS]]
- [[#ivy][IVY]]
  - [[#ivy-posframe][IVY-POSFRAME]]
  - [[#ivy-keybindings][IVY KEYBINDINGS]]
- [[#line-settings][LINE SETTINGS]]
- [[#mu4e][MU4E]]
- [[#neotree][NEOTREE]]
- [[#lsp][LSP]]
  - [[#lsp-servers][LSP Servers]]
- [[#tree-sitter][TREE-SITTER]]
- [[#company-mode][COMPANY MODE]]
- [[#projectile-mode][PROJECTILE MODE]]
- [[#open-specific-files][OPEN SPECIFIC FILES]]
- [[#org-mode][ORG MODE]]
  - [[#exporters][EXPORTERS]]
  - [[#ui-1][UI]]
  - [[#general-setup][GENERAL SETUP]]
  - [[#lsp-1][LSP]]
- [[#registers][REGISTERS]]
- [[#shells][SHELLS]]
- [[#splits][SPLITS]]
- [[#winner-mode][WINNER MODE]]
- [[#quickscope][QUICKSCOPE]]
- [[#spellcheck][SPELLCHECK]]
- [[#passwords][PASSWORDS]]
- [[#elfeed][ELFEED]]
  - [[#root][root]]
- [[#skeletor][SKELETOR]]
- [[#screenkey][SCREENKEY]]
- [[#very-large-files-mode][VERY LARGE FILES MODE]]
- [[#emacs-everywhere][EMACS EVERYWHERE]]
- [[#which-key][WHICH-KEY]]
- [[#zen][ZEN]]
- [[#systemd][SYSTEMD]]

* ABOUT THIS CONFIG
This is my personal Doom Emacs config based off what [[https://gitlab.com/dwt1][Distrotube]] provides. Doom Emacs is a distribution of Emacs that uses the "evil" keybindings (Vim keybindings) and includes a number of nice extensions and a bit of configuration out of the box. I am maintaining this config not just for my own use, but also to keep record of some of the more useful things that are possible within Emacs. I will add a lot of examples of plugins and settings, some of them I may not even use personally. I do this so that if I ever need to enable some feature, I will just need to change a flag rather than do lots of research for it. Any functions or variables that I declare will be under =doom=.

* GENERAL TWEAKS
** OPTIONS
#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      truncate-string-ellipsis "…")               ; Unicode ellispis are nicer than "...", and also save /precious/ space

(display-time-mode 1)                             ; Enable time in the mode-line

(if (equal "Battery status not available"
           (battery))
    (display-battery-mode 1)                        ; On laptops it's nice to know how much power you have
  (setq password-cache-expiry nil))               ; I can trust my desktops ... can't I? (no battery = desktop)

(global-subword-mode 1)                           ; Iterate through CamelCase words
(setq doom-fallback-buffer-name "► Doom"
      +doom-dashboard-name "► Doom")
#+end_src
** WINDOWS
This config sets up the window rules to ask what buffer you want after a split, and previews the buffers with ivy
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))
(setq +ivy-buffer-preview t)
#+end_src
Window rotation is in doom by default, but /layout/ rotation is not. This adds layout rotation under =SPC w SPC=, and arrow key versions of movements in case they ever come in handy.
#+begin_src emacs-lisp
(map! :map evil-window-map
      "SPC" #'rotate-layout
      ;; Navigation
      "<left>"     #'evil-window-left
      "<down>"     #'evil-window-down
      "<up>"       #'evil-window-up
      "<right>"    #'evil-window-right
      ;; Swapping windows
      "C-<left>"       #'+evil/window-move-left
      "C-<down>"       #'+evil/window-move-down
      "C-<up>"         #'+evil/window-move-up
      "C-<right>"      #'+evil/window-move-right)
#+end_src

** FRAMES
The frame title should really only be the file and project name.
#+begin_src emacs-lisp
(setq frame-title-format
      '(""
        (:eval
         (if (s-contains-p org-roam-directory (or buffer-file-name ""))
             (replace-regexp-in-string
              ".*/[0-9]*-?" "☰ "
              (subst-char-in-string ?_ ?  buffer-file-name))
           "%b"))
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p)  " ◉ %s" "  ●  %s") project-name))))))
#+end_src
** UI
Doom sets up the ui to be almost perfect by default, but there are a few additions that I like to add that are not dependent on any mode or package. I put all of these such tweaks into this source block
#+begin_src emacs-lisp
(defvar doom/frame-transparency '(100 . 100))
;; Set frame transparency
(set-frame-parameter (selected-frame) 'alpha doom/frame-transparency)
(add-to-list 'default-frame-alist `(alpha . ,doom/frame-transparency))
(setq eros-eval-result-prefix "⟹ ")
#+end_src

Setting the theme to doom-gruvbox. To try out new themes, I set a keybinding for counsel-load-theme with 'SPC t h'. Also fixes odd issues with modeline.
#+BEGIN_SRC emacs-lisp
(setq doom-modeline-icon t
      doom-gruvbox-dark-variant "hard"
      doom-theme 'doom-gruvbox)
(map! :leader
      :desc "Load new theme" "t h" #'counsel-load-theme)
#+END_SRC
The modeline should not be showing information that is assumed to be true, ie UTF-800
#+begin_src emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (and (memq (plist-get (coding-system-plist buffer-file-coding-system) :category)
                                 '(coding-category-undecided coding-category-utf-8))
                           (not (memq (coding-system-eol-type buffer-file-coding-system) '(1 2))))
                t)))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src
*** EMOJI
One minor annoyance is the use of emojis over the default character when the default is actually preferred. This occurs with overlay symbols Org mode, such as checkbox state, and a few other miscellaneous cases.
#+begin_src emacs-lisp
(defvar emojify-disabled-emojis
  '(;; Org
    "◼" "☑" "☸" "⚙" "⏩" "⏪" "⬆" "⬇" "❓"
    ;; Terminal powerline
    "✔"
    ;; Box drawing
    "▶" "◀")
  "Charachters that should never be affected by `emojify-mode'.")

(defadvice! emojify-delete-from-data ()
  "Ensure `emojify-disabled-emojis' don't appear in `emojify-emojis'."
  :after #'emojify-set-emoji-data
  (dolist (emoji emojify-disabled-emojis)
    (remhash emoji emojify-emojis)))
(add-hook! '(mu4e-compose-mode org-msg-edit-mode circe-channel-mode) (emoticon-to-emoji 1))
#+end_src
** SPLASH
Doom can render really fancy images on the splash screen, and you can put whatever information you want there. I take advantage of both o these here to create and image based on the size of the frame, and add template support
#+begin_src emacs-lisp
(defvar fancy-splash-image-template
  (expand-file-name "misc/splash-images/blackhole-lines-template.svg" doom-private-dir)
  "Default template svg used for the splash image, with substitutions from ")
(defvar fancy-splash-image-nil
  (expand-file-name "misc/splash-images/transparent-pixel.png" doom-private-dir)
  "An image to use at minimum size, usually a transparent pixel")

(setq fancy-splash-sizes
      `((:height 500 :min-height 50 :padding (0 . 4) :template ,(expand-file-name "misc/splash-images/blackhole-lines-0.svg" doom-private-dir))
        (:height 440 :min-height 42 :padding (1 . 4) :template ,(expand-file-name "misc/splash-images/blackhole-lines-0.svg" doom-private-dir))
        (:height 400 :min-height 38 :padding (1 . 4) :template ,(expand-file-name "misc/splash-images/blackhole-lines-1.svg" doom-private-dir))
        (:height 350 :min-height 36 :padding (1 . 3) :template ,(expand-file-name "misc/splash-images/blackhole-lines-2.svg" doom-private-dir))
        (:height 300 :min-height 34 :padding (1 . 3) :template ,(expand-file-name "misc/splash-images/blackhole-lines-3.svg" doom-private-dir))
        (:height 250 :min-height 32 :padding (1 . 2) :template ,(expand-file-name "misc/splash-images/blackhole-lines-4.svg" doom-private-dir))
        (:height 200 :min-height 30 :padding (1 . 2) :template ,(expand-file-name "misc/splash-images/blackhole-lines-5.svg" doom-private-dir))
        (:height 100 :min-height 24 :padding (1 . 2) :template ,(expand-file-name "misc/splash-images/emacs-e-template.svg" doom-private-dir))
        (:height 0   :min-height 0  :padding (0 . 0) :file ,fancy-splash-image-nil)))

(defvar fancy-splash-sizes
  `((:height 500 :min-height 50 :padding (0 . 2))
    (:height 440 :min-height 42 :padding (1 . 4))
    (:height 330 :min-height 35 :padding (1 . 3))
    (:height 200 :min-height 30 :padding (1 . 2))
    (:height 0   :min-height 0  :padding (0 . 0) :file ,fancy-splash-image-nil))
  "list of plists with the following properties
  :height the height of the image
  :min-height minimum `frame-height' for image
  :padding `+doom-dashboard-banner-padding' to apply
  :template non-default template file
  :file file to use instead of template")

(defvar fancy-splash-template-colours
  '(("$colour1" . keywords) ("$colour2" . type) ("$colour3" . base5) ("$colour4" . base8))
  "list of colour-replacement alists of the form (\"$placeholder\" . 'theme-colour) which applied the template")

(unless (file-exists-p (expand-file-name "theme-splashes" doom-cache-dir))
  (make-directory (expand-file-name "theme-splashes" doom-cache-dir) t))

(defun fancy-splash-filename (theme-name height)
  (expand-file-name (concat (file-name-as-directory "theme-splashes")
                            theme-name
                            "-" (number-to-string height) ".svg")
                    doom-cache-dir))

(defun fancy-splash-clear-cache ()
  "Delete all cached fancy splash images"
  (interactive)
  (delete-directory (expand-file-name "theme-splashes" doom-cache-dir) t)
  (message "Cache cleared!"))

(defun fancy-splash-generate-image (template height)
  "Read TEMPLATE and create an image if HEIGHT with colour substitutions as
   described by `fancy-splash-template-colours' for the current theme"
  (with-temp-buffer
    (insert-file-contents template)
    (re-search-forward "$height" nil t)
    (replace-match (number-to-string height) nil nil)
    (dolist (substitution fancy-splash-template-colours)
      (goto-char (point-min))
      (while (re-search-forward (car substitution) nil t)
        (replace-match (doom-color (cdr substitution)) nil nil)))
    (write-region nil nil
                  (fancy-splash-filename (symbol-name doom-theme) height) nil nil)))

(defun fancy-splash-generate-images ()
  "Perform `fancy-splash-generate-image' in bulk"
  (dolist (size fancy-splash-sizes)
    (unless (plist-get size :file)
      (fancy-splash-generate-image (or (plist-get size :file)
                                       (plist-get size :template)
                                       fancy-splash-image-template)
                                   (plist-get size :height)))))

(defun ensure-theme-splash-images-exist (&optional height)
  (unless (file-exists-p (fancy-splash-filename
                          (symbol-name doom-theme)
                          (or height
                              (plist-get (car fancy-splash-sizes) :height))))
    (fancy-splash-generate-images)))

(defun get-appropriate-splash ()
  (let ((height (frame-height)))
    (cl-some (lambda (size) (when (>= height (plist-get size :min-height)) size))
             fancy-splash-sizes)))

(setq fancy-splash-last-size nil)
(setq fancy-splash-last-theme nil)
(defun set-appropriate-splash (&rest _)
  (let ((appropriate-image (get-appropriate-splash)))
    (unless (and (equal appropriate-image fancy-splash-last-size)
                 (equal doom-theme fancy-splash-last-theme)))
    (unless (plist-get appropriate-image :file)
      (ensure-theme-splash-images-exist (plist-get appropriate-image :height)))
    (setq fancy-splash-image
          (or (plist-get appropriate-image :file)
              (fancy-splash-filename (symbol-name doom-theme) (plist-get appropriate-image :height))))
    (setq +doom-dashboard-banner-padding (plist-get appropriate-image :padding))
    (setq fancy-splash-last-size appropriate-image)
    (setq fancy-splash-last-theme doom-theme)
    (+doom-dashboard-reload)))

(add-hook 'window-size-change-functions #'set-appropriate-splash)
(add-hook 'doom-load-theme-hook #'set-appropriate-splash)
#+end_src
** DAEMON
The emacs daemon needs to be configured by default to be useful. THis also allows for background processes like an org-tangler and mu4e.
#+begin_src emacs-lisp
(defun greedily-do-daemon-setup ()
  (require 'org)
  (when (require 'mu4e nil t)
    (setq mu4e-confirm-quit t)
    (setq +mu4e-lock-greedy t)
    (setq +mu4e-lock-relaxed t)
    (+mu4e-lock-add-watcher)
    (when (+mu4e-lock-available t)
      (mu4e~start)))
  (when (require 'elfeed nil t)
    (run-at-time nil (* 8 60 60) #'elfeed-update)))

(when (daemonp)
  (add-hook 'emacs-startup-hook #'greedily-do-daemon-setup))
#+end_src
* BOOKMARKS AND BUFFERS
Doom Emacs uses 'SPC b' for keybindings related to bookmarks and buffers. Bookmarks are somewhat like registers in that they record positions you can jump to. Unlike registers, they have long names, and they persist automatically from one Emacs session to the next. The prototypical use of bookmarks is to record where you were reading in various files. Regarding buffers, the text you are editing in Emacs resides in an object called a buffer. Each time you visit a file, a buffer is used to hold the file’s text. Each time you invoke Dired, a buffer is used to hold the directory listing.

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("b" . "buffer")
       :desc "List bookmarks" "L" #'list-bookmarks
       :desc "Save current bookmarks to bookmark file" "w" #'bookmark-save))
#+END_SRC

* CENTAUR-TABS
To use tabs in Doom Emacs, be sure to uncomment "tabs" in Doom's init.el. Displays tabs at the top of the window similar to tabbed web browsers such as Firefox. I don't actually use tabs in Emacs. I placed this here mainly to practice E-Lisp, also in case I ever need it. In the default configuration of Doom Emacs, 'SPC t' is used for "toggle" keybindings, so I choose 'SPC t c' to toggle centaur-tabs.

| COMMAND                     | DESCRIPTION          | KEYBINDING       |
|-----------------------------+----------------------+------------------|
| centaur-tabs-local-mode     | Toggle tabs on/off   | SPC t c          |
| centaur-tabs-forward        | Next tab             | g <right> or g t |
| centaur-tabs-backward       | Previous tab         | g <left> or g T  |
| centaur-tabs-forward-group  | Next tab group       | g <down>         |
| centaur-tabs-backward-group | Previous tab group   | g <up>           |

#+BEGIN_SRC emacs-lisp
(setq centaur-tabs-set-bar 'over
      centaur-tabs-set-icons t
      centaur-tabs-gray-out-icons 'buffer
      centaur-tabs-height 24
      centaur-tabs-set-modified-marker t
      centaur-tabs-style "slant"
      centaur-tabs-modified-marker "•")
(map! :leader
      :desc "Toggle tab locally" "t C" #'centaur-tabs-local-mode
      :desc "Toggle tabs on/off" "t c" #'centaur-tabs-mode)
#+END_SRC

* DIRED
Dired is the file manager within Emacs. Below, I setup keybindings for image previews (peep-dired). Doom Emacs does not use 'SPC d' for any of its keybindings, so I've chosen the format of 'SPC d' plus 'key'.

| COMMAND                                   | DESCRIPTION                              | KEYBINDING |
|-------------------------------------------+------------------------------------------+------------|
| dired                                     | Open dired file manager                  | SPC d d    |
| dired-jump                                | Jump to current directory in dired       | SPC d j    |
| (in dired) peep-dired                     | Toggle image previews within dired       | SPC d p    |
| (in dired) dired-view-file                | View file in dired                       | SPC d v    |
| (in peep-dired-mode) peep-dired-next-file | Move to next file in peep-dired-mode     | j          |
| (in peep-dired-mode) peep-dired-prev-file | Move to previous file in peep-dired-mode | k          |

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired
        :desc "Dired view file" "d v" #'dired-view-file)))
(evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+END_SRC

* EVALUATE ELISP EXPRESSIONS

Changing some keybindings from their defaults to better fit with Doom Emacs, and to avoid conflicts with my window managers which sometimes use the control key in their keybindings. By default, Doom Emacs does not use 'SPC e' for anything, so I choose to use the format 'SPC e' plus 'key' for these (I also use 'SPC e' for 'eww' keybindings).

| COMMAND         | DESCRIPTION                                  | KEYBINDING |
|-----------------+----------------------------------------------+------------|
| eval-buffer     | Evaluate elisp in buffer                     | SPC e b    |
| eval-defun      | Evaluate the defun containing or after point | SPC e d    |
| eval-expression | Evaluate an elisp expression                 | SPC e e    |
| eval-last-sexp  | Evaluate elisp expression before point       | SPC e l    |
| eval-region     | Evaluate elisp in region                     | SPC e r    |

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("e" . "evaluate/eww")
       :desc "Evaluate elisp in buffer" "b" #'eval-buffer
       :desc "Evaluate defun" "d" #'eval-defun
       :desc "Evaluate elisp expression" "e" #'eval-expression
       :desc "Evaluate last sexpression" "l" #'eval-last-sexp
       :desc "Evaluate elisp in region" "r" #'eval-region))
#+END_SRC

* EWW
EWW is the Emacs Web Wowser, the builtin browser in Emacs. Below I set urls to open in a specific browser (eww) with browse-url-browser-function. By default, Doom Emacs does not use 'SPC e' for anything, so I choose to use the format 'SPC e' plus 'key' for these (I also use 'SPC e' for 'eval' keybindings).

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
(map! :leader
      (:prefix ("e" . "evaluate/Eww")
       :desc "Eww web browser" "w" #'eww
       :desc "Eww reload page" "R" #'eww-reload
       :desc "Seach web for text in region" "s" #'eww-search-words
       :desc "Copy URL to clipboard" "c" #'eww-copy-page-url))
#+END_SRC

* FONTS
Settings related to fonts within Doom Emacs:
+ 'doom-font' -- standard monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
+ 'font-lock-comment-face' -- for comments.
+ 'font-lock-keyword-face' -- for keywords with special significance, like ‘for’ and ‘if’ in C.
This also fixes the truncated mode line problem that occurs occasionally

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 12)
      doom-variable-pitch-font (font-spec :family "DejaVuSerif" :size 12)
      doom-big-font (font-spec :family "JetBrainsMono Nerd Font" :size 17))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
(setq all-the-icons-scale-factor 1.2)
#+END_SRC

* IVY
Ivy is a generic completion mechanism similar to Helm but more lightweight.

** IVY-POSFRAME
Ivy-posframe is an ivy extension, which lets ivy use posframe to show its candidate menu. Some of the settings below involve:
+ ivy-posframe-display-functions-alist -- sets the display position for specific programs
+ ivy-posframe-height-alist -- sets the height of the list displayed for specific programs

Available functions (positions) for 'ivy-posframe-display-functions-alist'
+ ivy-posframe-display-at-frame-center
+ ivy-posframe-display-at-window-center
+ ivy-posframe-display-at-frame-bottom-left
+ ivy-posframe-display-at-window-bottom-left
+ ivy-posframe-display-at-frame-bottom-window-center
+ ivy-posframe-display-at-point
+ ivy-posframe-display-at-frame-top-center

=NOTE=: If the setting for 'ivy-posframe-display' is set to 'nil' (false), anything that is set to 'ivy-display-function-fallback' will just default to their normal position in Doom Emacs (usually a bottom split). However, if this is set to 't' (true), then the fallback position will be centered in the window.

#+BEGIN_SRC emacs-lisp
(require 'ivy-posframe)
(setq ivy-posframe-display-functions-alist
      '((swiper                     . ivy-posframe-display-at-point)
        (complete-symbol            . ivy-posframe-display-at-point)
        (counsel-M-x                . ivy-display-function-fallback)
        (counsel-esh-history        . ivy-posframe-display-at-window-center)
        (counsel-describe-function  . ivy-display-function-fallback)
        (counsel-describe-variable  . ivy-display-function-fallback)
        (counsel-find-file          . ivy-display-function-fallback)
        (counsel-recentf            . ivy-display-function-fallback)
        (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
        (dmenu                      . ivy-posframe-display-at-frame-top-center)
        (nil                        . ivy-posframe-display))
      ivy-posframe-height-alist
      '((swiper . 20)
        (dmenu . 20)
        (t . 10)))
(ivy-posframe-mode 1) ; 1 enables posframe-mode, 0 disables it.
#+END_SRC

** IVY KEYBINDINGS
By default, Doom Emacs has 'SPC w' for window related commands, so I put these bindings under 'SPC w i'

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("w i" . "ivy")
       :desc "Push view" "p" #'ivy-push-view
       :desc "Switch view" "s" #'ivy-switch-view
       :desc "Pop view" "P" #'ivy-pop-view))
#+END_SRC

* LINE SETTINGS
I have toggled display-line-numbers-type so I have relative line numbers displayed. Doom Emacs uses 'SPC t' for "toggle" commands, so I choose 'SPC t t' for toggle-truncate-lines.

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
(map! :leader
      :desc "Toggle truncate lines" "t t" #'toggle-truncate-lines)
#+END_SRC

* MU4E
Setting up mu4e which is an email client that works within emacs. You must install mu4e and mbsync (isync in arch) through your Linux distribution's package manager. Setting up smtp for sending mail. Make sure the gnutls command line utils are installed. Package 'gnutls-bin' in Debian/Ubuntu, and 'gnutls' in Arch.

#+BEGIN_SRC emacs-lisp
(require 'smtpmail)
(after! mu4e
  (setq mu4e-root-maildir "~/.local/share/mail"
        mu4e-get-mail-command "mbsync -c ~/.config/mbsync/mbsyncrc -a"
        mu4e-update-interval (* 10 60))

  (setq mu4e-contexts
        (list
         ;; Personal account
         (make-mu4e-context
          :name "Personal"
          :match-func
          (lambda (msg)
            (when msg
              (string-prefix-p "/Personal" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "adamson.dom@gmail.com")
                  (user-full-name    . "Dominic Adamson")
                  (mu4e-compose-signature . "Dominic Adamson via GMail")
                  (smtpmail-smtp-server  . "smtp.gmail.com")
                  (smtpmail-smtp-service . 587)
                  (mu4e-drafts-folder  . "/Personal/[Gmail]/Drafts")
                  (mu4e-sent-folder  . "/Personal/[Gmail]/Sent Mail")
                  (mu4e-refile-folder  . "/Personal/[Gmail]/All Mail")
                  (mu4e-trash-folder  . "/Personal/[Gmail]/Trash")))

         ;; School account
         (make-mu4e-context
          :name "School"
          :match-func
          (lambda (msg)
            (when msg
              (string-prefix-p "/SLCC" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "dadam126@bruinmail.slcc.edu")
                  (user-full-name    . "Dominic Adamson")
                  (mu4e-compose-signature . "Dominic Adamson\n Sent from mozilla thunderbird\n")
                  (smtpmail-smtp-server  . "smtp.gmail.com")
                  (smtpmail-smtp-service . 587)
                  (mu4e-drafts-folder  . "/SLCC/[Gmail]/Drafts")
                  (mu4e-sent-folder  . "/SLCC/[Gmail]/Sent Mail")
                  (mu4e-refile-folder  . "/SLCC/[Gmail]/All Mail")
                  (mu4e-trash-folder  . "/SLCC/[Gmail]/Trash")))))

  (setq mu4e-maildir-shortcuts
        '(("/Personal/Inbox"             . ?i)
          ("/Personal/[Gmail]/Sent Mail" . ?s)
          ("/Personal/[Gmail]/Trash"     . ?t)
          ("/Personal/[Gmail]/Drafts"    . ?d)
          ("/Personal/[Gmail]/All Mail"  . ?a)

          ("/SLCC/Inbox"                 . ?k)
          ("/SLCC/[Gmail]/Sent Mail"     . ?w)
          ("/SLCC/[Gmail]/Trash"         . ?g)
          ("/SLCC/[Gmail]/Drafts"        . ?e)
          ("/SLCC/[Gmail]/All Mail"      . ?q))))
#+END_SRC

* NEOTREE
Neotree is a file tree viewer. When you open neotree, it jumps to the current file thanks to ~neo-smart-open~. The neo-window-fixed-size setting makes the neotree width be adjustable. Doom Emacs had no keybindings set for neotree. Since Doom Emacs uses 'SPC t' for 'toggle' keybindings, I used 'SPC t n' for toggle-neotree.

#+BEGIN_SRC emacs-lisp
(after! neotree
  (setq neo-smart-open t
        neo-window-fixed-size nil
        doom-themes-neotree-file-icons t))
(after! doom-themes
  (setq doom-neotree-enable-variable-pitch t))
(map! :leader
      :desc "Toggle neotree file viewer"
      "t n" #'neotree-toggle)
#+END_SRC

* LSP
LSP, or Language Server Protocol, is a standard created by microsoft for visual studio code that now is functional on almost every editor. It allows for a consistent interface to receive powerful IDE-like features across many languages. Here I enable every UI feature that lsp-ui provides.

#+BEGIN_SRC emacs-lisp
(defun doom/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-ui-mode 1)
  (lsp-headerline-breadcrumb-mode 1)
  (lsp-ui-peek-enable 1)
  (setq lsp-ui-sideline-show-hover t))

(use-package! lsp-mode
  :hook (lsp-mode . doom/lsp-mode-setup))
#+END_SRC
** LSP Servers
Some languages and servers are not default on doom, even though they are the ones that function best. This section goes through and changes these defaults
#+begin_src emacs-lisp
(after! rustic
  (setq rustic-lsp-server 'rls))
(after! ccls
  (setq ccls-initialization-options '(:index (:comments 2) :completion (:detailedLabel t)))
  (set-lsp-priority! 'ccls 2))
#+end_src

* TREE-SITTER
Tree-sitter is a open standard with bindings to emacs (similar to LSP or DAP) that allows for improved "understanding" of code languages. This is used here primarily to get better syntax highlighting while coding.

#+BEGIN_SRC emacs-lisp
(use-package! tree-sitter
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+END_SRC

* COMPANY MODE
Company mode is the preferred completion engine of doom emacs and integrates well with most plugins. The way it is configured in doom is almost perfect but I need to make a few adjustments, namely <TAB> functionality, to make it ideal.

#+BEGIN_SRC emacs-lisp
(use-package! company
  :after lsp-mode
  :hook ((lsp-mode . company-mode)
         (emacs-lisp-mode . company-mode))
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
  (:map lsp-mode-map
   ("<tab>" . company-complete-selection))
  :custom
  (company-minimum-prefix-length 1)
  (company-show-numbers t)
  (company-idle-delay 0.2))

(setq-default history-length 1000
              prescient-history-length 1000
              yas-triggers-in-field t)
  #+END_SRC
* PROJECTILE MODE
#+begin_src emacs-lisp
(setq projectile-project-search-path '("~/Documents/code/" "~/.config/"))
#+end_src

* OPEN SPECIFIC FILES
Keybindings to open files that I work with all the time using the find-file command, which is the interactive file search that opens with 'C-x C-f' in GNU Emacs or 'SPC f f' in Doom Emacs. These keybindings use find-file non-interactively since we specify exactly what file to open. The format I use for these bindings is 'SPC -' plus 'key' since Doom Emacs does not use these keybindings.

| PATH TO FILE               | DESCRIPTION           | KEYBINDING |
|----------------------------+-----------------------+------------|
| ~/Documents/org/agenda.org | Edit agenda file      | SPC - a    |
| ~/.config/doom/config.org  | Edit doom config.org  | SPC - c    |
| ~/.config/doom/aliases     | Edit eshell aliases   | SPC - e    |
| ~/.config/doom/init.el     | Edit doom init.el     | SPC - i    |
| ~/.config/doom/packages.el | Edit doom packages.el | SPC - p    |

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("-" . "open file")
       :desc "Edit agenda file" "a" #'(lambda () (interactive) (find-file "~/Documents/org/agenda.org"))
       :desc "Edit doom config.org" "c" #'(lambda () (interactive) (find-file "~/.config/doom/config.org"))
       :desc "Edit eshell aliases" "e" #'(lambda () (interactive) (find-file "~/.config/doom/aliases"))
       :desc "Edit doom init.el" "i" #'(lambda () (interactive) (find-file "~/.config/doom/init.el"))
       :desc "Edit doom packages.el" "p" #'(lambda () (interactive) (find-file "~/.config/doom/packages.el"))))
#+END_SRC

* ORG MODE
** EXPORTERS
This adds an org-export mode for groff, specifically the mgs macros, but also the ms ones as well. These will show up under 'g' in the export dispatcher.

#+BEGIN_SRC emacs-lisp
(require 'ox-groff)
(use-package! engrave-faces-latex
   :after ox-latex)
#+END_SRC

** UI
This change the fonts and formatting of org mode to make it much better looking.
#+begin_src emacs-lisp
(defun doom/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.15)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
  (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
  (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
  (setq visual-fill-column-width 170
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package! org-pretty-table
  :commands (org-pretty-table-mode global-org-pretty-table-mode))
#+end_src

** GENERAL SETUP
Note that I wrapped most of this in (after! org). Without this, my settings might be evaluated too early, which will result in my settings being overwritten by Doom's defaults. I have also enabled org-journal by adding (+journal) to the org section of my Doom Emacs init.el. I have this at the bottom of org mode so I can use my utility functions

#+BEGIN_SRC emacs-lisp
(after! org
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  (add-hook 'org-mode-hook 'doom/org-font-setup)
  (setq org-directory "~/Documents/org/"
        org-use-property-inheritance t
        org-agenda-files '("~/Documents/org/agenda.org")
        +org-capture-todo-file "agenda.org"
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-ellipsis " ▼ "
        org-log-done 'time
        org-log-done 'note
        org-list-allow-alphabetical t
        org-export-in-background t
        org-hide-emphasis-markers t
        org-catch-invisible-edits 'smart
        org-todo-keywords      ; This overwrites the default Doom org-todo-keywords
        '((sequence
           "TODO(t)"           ; A task that is ready to tackle
           "SCHOOL(s)"         ; School related assignments
           "PROJ(p)"           ; A project that contains other tasks
           "WAIT(w)"           ; Something is holding up this task
           "|"                 ; The pipe necessary to separate "active" states and "inactive" states
           "DONE(d)"           ; Task has completed
           "CANCELLED(c)"))) ; Task has cancelled
  (setq org-babel-default-header-args
        '((:session . "none")
          (:results . "replace")
          (:exports . "code")
          (:cache . "no")
          (:noweb . "no")
          (:hlines . "no")
          (:tangle . "no")
          (:comments . "link")))
  (remove-hook 'text-mode-hook #'visual-line-mode)
  (add-hook 'text-mode-hook #'auto-fill-mode)
  (add-hook 'org-mode-hook 'turn-on-flyspell)
  (map! :map evil-org-mode-map
        :after evil-org
        :n "g <up>" #'org-backward-heading-same-level
        :n "g <down>" #'org-forward-heading-same-level
        :n "g <left>" #'org-up-element
        :n "g <right>" #'org-down-element
        :n "g k" #'org-backward-heading-same-level
        :n "g j" #'org-forward-heading-same-level
        :n "g h" #'org-up-element
        :n "g l" #'org-down-element))
(use-package! org-chef
  :commands (org-chef-insert-recipe org-chef-get-recipe-from-url))
(use-package! org-ref
  :after org
  :config
  (setq org-ref-completion-library 'org-ref-ivy-cite))
#+END_SRC
** LSP
LSP and company in src blocks
#+begin_src emacs-lisp
(cl-defmacro lsp-org-babel-enable (lang)
  "Support LANG in org source code block."
  (setq centaur-lsp 'lsp-mode)
  (cl-check-type lang stringp)
  (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
         (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
    `(progn
       (defun ,intern-pre (info)
         (let ((file-name (->> info caddr (alist-get :file))))
           (unless file-name
             (setq file-name (make-temp-file "babel-lsp-")))
           (setq buffer-file-name file-name)
           (lsp-deferred)))
       (put ',intern-pre 'function-documentation
            (format "Enable lsp-mode in the buffer of org source block (%s)."
                    (upcase ,lang)))
       (if (fboundp ',edit-pre)
           (advice-add ',edit-pre :after ',intern-pre)
         (progn
           (defun ,edit-pre (info)
             (,intern-pre info))
           (put ',edit-pre 'function-documentation
                (format "Prepare local buffer environment for org source block (%s)."
                        (upcase ,lang))))))))
(defvar org-babel-lang-list
  '("go" "python" "ipython" "bash" "sh"))
(dolist (lang org-babel-lang-list)
  (eval `(lsp-org-babel-enable ,lang)))
#+end_src

* REGISTERS
Emacs registers are compartments where you can save text, rectangles and positions for later use. Once you save text or a rectangle in a register, you can copy it into the buffer once or many times; once you save a position in a register, you can jump back to that position once or many times. The default GNU Emacs keybindings for these commands (with the exception of counsel-register) involves 'C-x r' followed by one or more other keys. I wanted to make this a little more user friendly, and since I am using Doom Emacs, I choose to replace the 'C-x r' part of the key chords with 'SPC r'.

| COMMAND                          | DESCRIPTION                      | KEYBINDING |
|----------------------------------+----------------------------------+------------|
| copy-to-register                 | Copy to register                 | SPC R c    |
| frameset-to-register             | Frameset to register             | SPC R f    |
| insert-register                  | Insert contents of register      | SPC R i    |
| jump-to-register                 | Jump to register                 | SPC R j    |
| list-registers                   | List registers                   | SPC R l    |
| number-to-register               | Number to register               | SPC R n    |
| counsel-register                 | Interactively choose a register  | SPC R r    |
| view-register                    | View a register                  | SPC R v    |
| window-configuration-to-register | Window configuration to register | SPC R w    |
| increment-register               | Increment register               | SPC R +    |
| point-to-register                | Point to register                | SPC R SPC  |

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("R" . "registers")
       :desc "Copy to register" "c" #'copy-to-register
       :desc "Frameset to register" "f" #'frameset-to-register
       :desc "Insert contents of register" "i" #'insert-register
       :desc "Jump to register" "j" #'jump-to-register
       :desc "List registers" "l" #'list-registers
       :desc "Number to register" "n" #'number-to-register
       :desc "Interactively choose a register" "r" #'counsel-register
       :desc "View a register" "v" #'view-register
       :desc "Window configuration to register" "w" #'window-configuration-to-register
       :desc "Increment register" "+" #'increment-register
       :desc "Point to register" "SPC" #'point-to-register))
#+END_SRC

* SHELLS
Settings for the various shells and terminal emulators within Emacs.
+ 'shell-file-name' -- sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.
+ 'eshell-aliases-file' -- sets an aliases file for the eshell.

#+BEGIN_SRC emacs-lisp
(setq shell-file-name "/bin/zsh"
      eshell-aliases-file "~/.config/doom/aliases"
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "htop" "ssh" "zsh")
      vterm-max-scrollback 5000)
(map! :leader
      :desc "Counsel eshell history"
      "e h" #'counsel-esh-history)
#+END_SRC

* SPLITS
I set splits to default to opening on the right using 'prefer-horizontal-split'. I set a keybinding for 'clone-indirect-buffer-other-window' for when I want to have the same document in two splits. The text of the indirect buffer is always identical to the text of its base buffer; changes made by editing either one are visible immediately in the other. But in all other respects, the indirect buffer and its base buffer are completely separate. For example, I can fold one split but other will be unfolded.

#+BEGIN_SRC emacs-lisp
(defun prefer-horizontal-split ()
  (set-variable 'split-height-threshold nil t)
  (set-variable 'split-width-threshold 40 t)) ; make this as low as needed
(add-hook 'markdown-mode-hook 'prefer-horizontal-split)
(map! :leader
      :desc "Clone indirect buffer other window"
      "b c" #'clone-indirect-buffer-other-window)
#+END_SRC

* WINNER MODE
Winner mode has been included with GNU Emacs since version 20. This is a global minor mode and, when activated, it allows you to “undo” (and “redo”) changes in the window configuration with the key commands 'SCP w <left>' and 'SPC w <right>'.

#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Winner redo" "w <right>" #'winner-redo
      :desc "Winner undo" "w <left>" #'winner-undo)
#+END_SRC

* QUICKSCOPE
Quickscope is an extension that shows the first letter of each word that could be reached with =F, f, T, t, etc=
#+BEGIN_SRC emacs-lisp
(global-evil-quickscope-always-mode 1)
#+END_SRC

* SPELLCHECK
Emacs needs to know the default dictionary to use with spell backends like aspell.
#+BEGIN_SRC emacs-lisp
(setq ispell-dictionary "en")
#+END_SRC

* PASSWORDS
This sets up the auth-source library and adds functions to access passwords outside of emacs
#+BEGIN_SRC emacs-lisp
(setq auth-sources '("~/.authinfo.gpg"))
(defun lookup-password (&rest keys)
  (let ((result (apply #'auth-source-search keys)))
    (if result
        (funcall (plist-get (car result) :secret))
      nil)))
#+END_SRC

* ELFEED
Doom adds the elfeed-org plugin with elfeed, meaning that feeds can be configured with org.
** root :elfeed:
*** [[https://archlinux.org/feeds/news/][ArchLinux News]] :arch:

* SKELETOR
Skeletor is a package from MELPA that aids in project creation. It allows you to create "skeleton" project templates, or specify system commands to run to make the project. Skeletor also provides a few options that require configuration.
#+begin_src emacs-lisp
(setq skeletor-project-directory "~/Documents/code"
      skeletor-user-directory "~/Documents/code/skeletons")
#+end_src

* SCREENKEY
This sets up the package =keycast=, so I can record my keys or what I am pressing if I ever need to.
#+begin_src emacs-lisp
(use-package! keycast
  :commands keycast-mode
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line."
    :global t
    (if keycast-mode
        (progn
          (add-hook 'pre-command-hook 'keycast--update t)
          (add-to-list 'global-mode-string '("" mode-line-keycast " ")))
      (remove-hook 'pre-command-hook 'keycast--update)
      (setq global-mode-string (remove '("" mode-line-keycast " ") global-mode-string))))
  (custom-set-faces!
    '(keycast-command :inherit doom-modeline-debug
                      :height 0.9)
    '(keycast-key :inherit custom-modified
                  :height 1.1
                  :weight bold)))
(use-package! gif-screencast
  :commands gif-screencast-mode
  :config
  (map! :map gif-screencast-mode-map
        :g "<f8>" #'gif-screencast-toggle-pause
        :g "<f9>" #'gif-screencast-stop)
  (setq gif-screencast-program "maim"
        gif-screencast-args `("--quality" "3" "-i" ,(string-trim-right
                                                     (shell-command-to-string
                                                      "xdotool getactivewindow")))
        gif-screencast-optimize-args '("--batch" "--optimize=3" "--usecolormap=/tmp/doom-color-theme"))
  (defun gif-screencast-write-colormap ()
    (f-write-text
     (replace-regexp-in-string
      "\n+" "\n"
      (mapconcat (lambda (c) (if (listp (cdr c))
                                 (cadr c))) doom-themes--colors "\n"))
     'utf-8
     "/tmp/doom-color-theme" ))
  (gif-screencast-write-colormap)
  (add-hook 'doom-load-theme-hook #'gif-screencast-write-colormap))
#+end_src

* VERY LARGE FILES MODE
This package makes it possible to open *massive* files by loading them from disc incrementally in chunks.
#+begin_src emacs-lisp
(use-package! vlf-setup
  :defer-incrementally vlf-tune vlf-base vlf-write vlf-search vlf-occur vlf-follow vlf-ediff vlf)
#+end_src

* EMACS EVERYWHERE
Now who wouldn't want this?
#+begin_src emacs-lisp
(when (daemonp)
  (require 'spell-fu)
  (setq emacs-everywhere-major-mode-function #'org-mode
        emacs-everywhere-frame-name-format "Edit ∷ %s — %s")
  (require 'emacs-everywhere))
#+end_src

* WHICH-KEY
Does =evil-= need to appear on every binding? No.
#+begin_src emacs-lisp
(setq which-key-allow-multiple-replacements t)
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))
   ))
#+end_src

* ZEN
Doom zooms in too much
#+begin_src emacs-lisp
(setq +zen-text-scale 0.8)
#+end_src
When zen is on in org, keep org nice, thank you!
#+begin_src emacs-lisp
(defvar +zen-serif-p t
  "Whether to use a serifed font with `mixed-pitch-mode'.")
(after! writeroom-mode
  (defvar-local +zen--original-org-indent-mode-p nil)
  (defvar-local +zen--original-mixed-pitch-mode-p nil)
  (defvar-local +zen--original-solaire-mode-p nil)
  (defvar-local +zen--original-org-pretty-table-mode-p nil)
  (defun +zen-enable-mixed-pitch-mode-h ()
    "Enable `mixed-pitch-mode' when in `+zen-mixed-pitch-modes'."
    (when (apply #'derived-mode-p +zen-mixed-pitch-modes)
      (if writeroom-mode
          (progn
            (setq +zen--original-solaire-mode-p solaire-mode)
            (solaire-mode -1)
            (setq +zen--original-mixed-pitch-mode-p mixed-pitch-mode)
            (funcall (if +zen-serif-p #'mixed-pitch-serif-mode #'mixed-pitch-mode) 1))
        (funcall #'mixed-pitch-mode (if +zen--original-mixed-pitch-mode-p 1 -1))
        (when +zen--original-solaire-mode-p (solaire-mode 1)))))
  (pushnew! writeroom--local-variables
            'display-line-numbers
            'visual-fill-column-width
            'org-adapt-indentation
            'org-superstar-headline-bullets-list
            'org-superstar-remove-leading-stars)
  (add-hook 'writeroom-mode-enable-hook
            (defun +zen-prose-org-h ()
              "Reformat the current Org buffer appearance for prose."
              (when (eq major-mode 'org-mode)
                (setq display-line-numbers nil
                      visual-fill-column-width 60
                      org-adapt-indentation nil)
                (when (featurep 'org-superstar)
                  (setq-local org-superstar-headline-bullets-list '("🙘" "🙙" "🙚" "🙛")
                              ;; org-superstar-headline-bullets-list '("🙐" "🙑" "🙒" "🙓" "🙔" "🙕" "🙖" "🙗")
                              org-superstar-remove-leading-stars t)
                  (org-superstar-restart))
                (setq
                 +zen--original-org-indent-mode-p org-indent-mode
                 +zen--original-org-pretty-table-mode-p (bound-and-true-p org-pretty-table-mode))
                (org-indent-mode -1)
                (org-pretty-table-mode 1))))
  (add-hook 'writeroom-mode-disable-hook
            (defun +zen-nonprose-org-h ()
              "Reverse the effect of `+zen-prose-org'."
              (when (eq major-mode 'org-mode)
                (when (featurep 'org-superstar)
                  (org-superstar-restart))
                (when +zen--original-org-indent-mode-p (org-indent-mode 1))
                ;; (unless +zen--original-org-pretty-table-mode-p (org-pretty-table-mode -1))
                ))))
#+end_src

* SYSTEMD
To make emacs more useful, the emacs daemon runs in the background, and you connect to it. However, the daemon crashes rather frequently in GCCEmacs, so a systemd service is needed to make it more useful.
#+begin_src systemd :tangle ~/.config/systemd/user/emacs.service :mkdirp yes
[Unit]
Description=Emacs server daemon
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
Type=forking
ExecStart=sh -c 'emacs --daemon && emacsclient -c --eval "(delete-frame)"'
ExecStop=/usr/bin/emacsclient --no-wait --eval "(progn (setq kill-emacs-hook nil) (kill emacs))"
Restart=on-failure

[Install]
WantedBy=default.target
#+end_src
